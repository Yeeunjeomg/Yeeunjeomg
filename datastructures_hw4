{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 02: 튜플을 이용한 회문 체크"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_palindrome(word):\n",
    "    return tuple(word) == tuple(reversed(word))\n",
    "\n",
    "# 테스트\n",
    "w = input(\"문자열 입력: \")\n",
    "if is_palindrome(w):\n",
    "    print(\"회문입니다.\")\n",
    "else:\n",
    "    print(\"회문이 아닙니다.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 03: 큐 복사와 객체 참조 차이"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 얕은 복사\n",
    "Q1 = LinkedQueue()\n",
    "Q2 = Q1  # 같은 객체를 참조\n",
    "\n",
    "# 깊은 복사 (enqueue 이용)\n",
    "Q1 = LinkedQueue()\n",
    "Q2 = LinkedQueue()\n",
    "while not Q1.isEmpty():\n",
    "    Q2.enqueue(Q1.dequeue())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 04 & 05: 스택 2개로 큐 구현 (push/pop, enqueue/dequeue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TwoStackQueue:\n",
    "    def __init__(self):\n",
    "        self.stack1 = []\n",
    "        self.stack2 = []\n",
    "\n",
    "    def push(self, x):  # enqueue와 동일\n",
    "        self.stack1.append(x)\n",
    "\n",
    "    def pop(self):  # dequeue와 동일\n",
    "        if not self.stack2:\n",
    "            while self.stack1:\n",
    "                self.stack2.append(self.stack1.pop())\n",
    "        if not self.stack2:\n",
    "            raise IndexError(\"pop from empty queue\")\n",
    "        return self.stack2.pop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 06: 리스트로 구현 시 시간 복잡도 분석"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- enqueue (append)는 O(1)\n",
    "- dequeue (pop(0))는 O(n)\n",
    "- 리스트의 앞에서 제거 시, 전체를 앞으로 당겨야 하므로 비효율적"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 07: 연결 리스트로 구현 시 시간 복잡도"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- enqueue: O(1) (tail에서 추가)\n",
    "- dequeue: O(1) (head에서 제거)\n",
    "- 연결 리스트는 인덱스 이동이 없기 때문에 더 효율적"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 연습문제 08: Deque 클래스 구현"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Deque:\n",
    "    def __init__(self):\n",
    "        self.__deque = []\n",
    "\n",
    "    def addFront(self, x):\n",
    "        self.__deque.insert(0, x)\n",
    "\n",
    "    def addRear(self, x):\n",
    "        self.__deque.append(x)\n",
    "\n",
    "    def deleteFront(self):\n",
    "        if self.isEmpty():\n",
    "            raise IndexError(\"delete from empty deque\")\n",
    "        return self.__deque.pop(0)\n",
    "\n",
    "    def deleteRear(self):\n",
    "        if self.isEmpty():\n",
    "            raise IndexError(\"delete from empty deque\")\n",
    "        return self.__deque.pop()\n",
    "\n",
    "    def isEmpty(self):\n",
    "        return len(self.__deque) == 0\n",
    "\n",
    "    def clear(self):\n",
    "        self.__deque.clear()\n",
    "\n",
    "    def printDeque(self):\n",
    "        print(\"Deque:\", end=' ')\n",
    "        for x in self.__deque:\n",
    "            print(x, end=' ')\n",
    "        print()"
   ]
  }
 ]
}
